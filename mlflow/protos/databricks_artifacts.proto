syntax = "proto2";

package mlflow;

import "scalapb/scalapb.proto";
import "databricks.proto";

option java_package = "com.databricks.api.proto.mlflow";
option java_generate_equals_and_hash = true;
option py_generic_services = true;
option (scalapb.options) = {
  flat_package: true,
};

service DatabricksMlflowArtifactsService {

  // Fetch credentials to read from the specified MLflow artifact location
  //
  // Note: Even if no artifacts exist at the specified artifact location, this API will
  // still provide read credentials as long as the format of the location is valid.
  // Callers must subsequently check for the existence of the artifacts using the appropriate
  // cloud storage APIs (as determined by the `ArtifactCredentialType` property of the response)
  rpc getCredentialsForRead (GetCredentialsForRead) returns (GetCredentialsForRead.Response) {
    option (rpc) = {
      endpoints: [{
        method: "GET",
        path: "/mlflow/artifacts/credentials-for-read"
        since { major: 2, minor: 0 },
      }],
      visibility: PUBLIC_UNDOCUMENTED,
    };
  }

  // Fetch credentials to write to the specified MLflow artifact location
  rpc getCredentialsForWrite (GetCredentialsForWrite) returns (GetCredentialsForWrite.Response) {
    option (rpc) = {
      endpoints: [{
        method: "GET",
        path: "/mlflow/artifacts/credentials-for-write"
        since { major: 2, minor: 0 },
      }],
      visibility: PUBLIC_UNDOCUMENTED,
    };
  }
}

message ArtifactCredentialInfo {

  // The ID of the MLflow Run containing the artifact that can be accessed
  // with the credential
  optional string run_id = 1;

  // The path, relative to the Run's artifact root location, of the artifact
  // that can be accessed with the credential
  optional string path = 2;

  // The signed URI credential that provides access to the artifact
  optional string signed_uri = 3;


  message AWSPresignedURLCredential {

    optional string signed_uri = 1;

    // If specified, one of `AES256` or `KMS`
    optional string encryption_type = 2;

    optional string kms_key_id = 3;

  }

  message AzureSASCredential {

    optional string signed_uri = 1;

  }

  oneof credential {
    AWSPresignedURLCredential aws_presigned_url = 4;
    AzureSASCredential azure_sas = 5;
  }
}

message GetCredentialsForRead {
  option (scalapb.message).extends = "com.databricks.rpc.RPC[$this.Response]";

  // The ID of the MLflow Run for which to fetch artifact read credentials
  optional string run_id = 1 [(validate_required) = true];

  // The artifact path, relative to the Run's artifact root location, for which to
  // fetch artifact read credentials
  optional string path = 2 [(validate_required) = true];

  message Response {

    // Credentials for reading from the specified artifact location
    optional ArtifactCredentialInfo credentials = 1;

  }
}

message GetCredentialsForWrite {
  option (scalapb.message).extends = "com.databricks.rpc.RPC[$this.Response]";

  // The ID of the MLflow Run for which to fetch artifact write credentials
  optional string run_id = 1 [(validate_required) = true];

  // The artifact path, relative to the Run's artifact root location, for which to
  // fetch artifact write credentials
  optional string path = 2 [(validate_required) = true];

  message Response {

    // Credentials for writing to the specified artifacts location
    optional ArtifactCredentialInfo credentials = 1;

  }
}
